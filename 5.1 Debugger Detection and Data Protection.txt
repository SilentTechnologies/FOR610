use x64bdg to list API calls
	search for > Current Region > Intermodular Calls

Can also use PeStudio

if a program behaves differently in a debugger - one thing could be 
IsDebuggerPresent - Win API to check if program is being debugged
	can patch the jump/test - replace with NOP's 

program can also check the PEB () for the BeingDebugged bit
	PEB address is always stored in FS 30h

Malware can also detect debugger through GetTickCount - if too slow then process is likely being single stepped in a debugger
eg
	if ((GetTickCount() - lStartTime) > 5000) {
	g_pMainCtrl->m_cConsDbg.Log(5,
	"Routine took too long to execute, progably single-step...\n");
	m_bIsDebug=true; return true;
	}

can also compare API calls - GetLocalTime and GetSystemTime etc.

in x64dbg/x32dbg - ScyllaHide option

xorsearch -i(case insensitive) -s(scanfile if key is discovered) <file>.exe <string>

balbuzard toolkit
	bbcrack.py - tries and ranks keys which may have been used

other decoders -
	xorBruteForcer.py
	NoMoreXOR.py
	xortool
	unXOR
	kahu tools etc.

if stack strings have been used
	strdeob.pl <file>.exe | more

FLOSS - from fireeye
	auto-deobfiscate strings - best for custom string encoders
	floss <file>.exe > file.txt

RtlDecompressBuffer - decompresses data in a buffer - deobfuscation or unpacking code

